// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pcr_amplify
List pcr_amplify(List temp, int cycle, double efficiency_amplification, double ratio_mutation);
RcppExport SEXP _CellBarcodeSim_pcr_amplify(SEXP tempSEXP, SEXP cycleSEXP, SEXP efficiency_amplificationSEXP, SEXP ratio_mutationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< int >::type cycle(cycleSEXP);
    Rcpp::traits::input_parameter< double >::type efficiency_amplification(efficiency_amplificationSEXP);
    Rcpp::traits::input_parameter< double >::type ratio_mutation(ratio_mutationSEXP);
    rcpp_result_gen = Rcpp::wrap(pcr_amplify(temp, cycle, efficiency_amplification, ratio_mutation));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CellBarcodeSim_pcr_amplify", (DL_FUNC) &_CellBarcodeSim_pcr_amplify, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_CellBarcodeSim(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
